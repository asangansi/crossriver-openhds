
package org.openhds.domain.model;

import java.io.Serializable;
import java.util.Calendar;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.Past;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.openhds.domain.annotations.Description;
import org.openhds.domain.constraint.CheckCalendar;
import org.openhds.domain.constraint.CheckEntityNotVoided;
import org.openhds.domain.constraint.CheckIndividualNotUnknown;
import org.openhds.domain.constraint.ExtensionIntegerConstraint;
import org.openhds.domain.constraint.Searchable;


/**
 * Generated by JCodeModel
 * 
 */
@Description(description = "Standard Verbal Autopsy Questionnaire PostNeonatal Deaths (28 days to <12 years)")
@Entity
@Table(name = "postneonatalvpm")
@XmlRootElement(name = "postneonatalvpm")
public class PostNeoNatalVPM
    extends VisitableEntity
    implements Serializable
{

    public final static long serialVersionUID = 7646636209213391150L;
    @Searchable
    @CheckEntityNotVoided
    @CheckIndividualNotUnknown
    @ManyToOne(cascade = {
        CascadeType.ALL
    })
    @Description(description = "Individual who deceased, identified by the external id.")
    private Individual individual;
    @Searchable
    @ManyToOne
    @Description(description = "Location of the deceased individual.")
    private Location house;
    @Past(message = "Death date should be in the past")
    @CheckCalendar(message = "Child Death Date is invalid")
    @Temporal(TemporalType.DATE)
    @Description(description = "Date of the Death.")
    private Calendar childDeathDate;
    @Description(description = "Did the child's skin flake off in patches")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for skinFlakeoff", allowNull = true)
    private Integer skinFlakeoff;
    @Description(description = "Did the child receive care from a pharmacy")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareFromPharmacy", allowNull = true)
    private Integer receivedCareFromPharmacy;
    @Description(description = "How many days did the individual have diarrhoea")
    private Integer haveDiarrhoeaDays;
    @Description(description = "How many days did the individual have a rash")
    private Integer rashDays;
    @Description(description = "What kind of injury or accident")
    @ExtensionIntegerConstraint(constraint = "accidentTypeConstraint", message = "Invalid Value for accidentType", allowNull = true)
    private Integer accidentType;
    @Description(description = "Did the child have difficulty breathing")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveDifficultyBreathing", allowNull = true)
    private Integer haveDifficultyBreathing;
    @Description(description = "When symptom 3 ended")
    private Integer symptom3End;
    @Description(description = "Did the child have generalized body swelling")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveBodySwelling", allowNull = true)
    private Integer haveBodySwelling;
    @Description(description = "Did the child stop being able to follow movements")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for unableToFollowMovements", allowNull = true)
    private Integer unableToFollowMovements;
    @Description(description = "Explanation about the illness that led to the childs death")
    private String aboutIllness;
    @Description(description = "Did the child have a whitish rash inside the mouth or tongue")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveRashInsideMouth", allowNull = true)
    private Integer haveRashInsideMouth;
    @Description(description = "Did the child receive care from a hospital")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareFromHospital", allowNull = true)
    private Integer receivedCareFromHospital;
    @Description(description = "What type of abdominal pain was it")
    @ExtensionIntegerConstraint(constraint = "abdominalPainTypeConstraint", message = "Invalid Value for abdominalPainType", allowNull = true)
    private Integer abdominalPainType;
    @Description(description = "Specify the type of abdominal pain")
    private String abdominalPainTypeOther;
    @Description(description = "Did the child have white nails")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveWhiteNails", allowNull = true)
    private Integer haveWhiteNails;
    @Description(description = "How many days did the child have distention of the abdomen")
    private Integer distentionOfAbdomenDays;
    @Description(description = "Was care sought outside the home while the child had the illness")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareOutsideHome", allowNull = true)
    private Integer receivedCareOutsideHome;
    @Description(description = "Did the child have a fever")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveFever", allowNull = true)
    private Integer haveFever;
    @Description(description = "Did the child have swelling in the neck")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for swellingInNeck", allowNull = true)
    private Integer swellingInNeck;
    @Description(description = "Did the child receive care from a community based practitioner")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareFromCHO", allowNull = true)
    private Integer receivedCareFromCHO;
    @Description(description = "Was the child wasting during the month before they died")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for wasWasting", allowNull = true)
    private Integer wasWasting;
    @Description(description = "Did the deceased suffer from other illnesses")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for dieFromInjuryOrAccident", allowNull = true)
    private Integer dieFromInjuryOrAccident;
    @Description(description = "Symptom 5 reported by interviewer")
    private String symptom5;
    @Description(description = "How many days did the child have swollen legs or feet")
    private Integer swollenLegsOrFeetNumDays;
    @Description(description = "Did the child receive care from a drug seller")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareFromDrugSeller", allowNull = true)
    private Integer receivedCareFromDrugSeller;
    @Description(description = "Symptom 4 reported by interviewer")
    private String symptom4;
    @Description(description = "Symptom 2 severity reported by respondent")
    @ExtensionIntegerConstraint(constraint = "symptomSeverityConstraint", message = "Invalid Value for symptom2Severity", allowNull = true)
    private Integer symptom2Severity;
    @Description(description = "Symptom 3 reported by interviewer")
    private String symptom3;
    @Description(description = "Symptom 2 reported by interviewer")
    private String symptom2;
    @Description(description = "Was the illness measels")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for haveMeasels", allowNull = true)
    private Integer haveMeasels;
    @Description(description = "Symptom 1 reported by interviewer")
    private String symptom1;
    @Description(description = "Did the individual die where the accident occurred")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for diedAtAccident", allowNull = true)
    private Integer diedAtAccident;
    @Description(description = "Did the child get more sick or ill than other children in the community")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for sicknessRate", allowNull = true)
    private Integer sicknessRate;
    @Description(description = "Did the child have fast breathing")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveFastBreathing", allowNull = true)
    private Integer haveFastBreathing;
    @Description(description = "Did the child receive care from a health center")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareFromHealthCenter", allowNull = true)
    private Integer receivedCareFromHealthCenter;
    @Description(description = "Did the child have bulging fontanel")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveBulgingFontanel", allowNull = true)
    private Integer haveBulgingFontanel;
    @Description(description = "Did the child have an ongoing chronic illness in the month before the accident or injury")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveChronicIllness", allowNull = true)
    private Integer haveChronicIllness;
    @Description(description = "Did the child have swelling in the armpit")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for swellingInArmpit", allowNull = true)
    private Integer swellingInArmpit;
    @Description(description = "Did the child have abdominal pain")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveAbdominalPain", allowNull = true)
    private Integer haveAbdominalPain;
    @Description(description = "The name of the facility where the individual died")
    private String whereDiedFacilityName;
    @Description(description = "Date of birth of child")
    @CheckCalendar(message = "Invalid value for date")
    @Temporal(TemporalType.DATE)
    @Past
    private Calendar childDob;
    @Description(description = "What is the severity of the pain")
    @ExtensionIntegerConstraint(constraint = "loseWeightSeverityConstraint", message = "Invalid Value for abdominalPainSeverity", allowNull = true)
    private Integer abdominalPainSeverity;
    @Description(description = "Did the rash have blisters containing clear fluids")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for rashHaveBlisters", allowNull = true)
    private Integer rashHaveBlisters;
    @Description(description = "Specify how long the child stopped being able to respond to a voice")
    @ExtensionIntegerConstraint(constraint = "graspConstraint", message = "Invalid Value for unableToRespondToVoiceLength", allowNull = true)
    private Integer unableToRespondToVoiceLength;
    @Description(description = "When the diarrhoea was severe, how many times did the child pass a stool in a day")
    private Integer stoolDays;
    @Description(description = "Did the child have swollen legs or feet")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for swollenLegsOrFeet", allowNull = true)
    private Integer swollenLegsOrFeet;
    @Description(description = "Did the child receive any anti-malaria drug during the illness")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for didReceiveAntiMalariDrug", allowNull = true)
    private Integer didReceiveAntiMalariDrug;
    @Description(description = "Did the child have fits")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveFits", allowNull = true)
    private Integer haveFits;
    @Description(description = "Did the child receive any fluids such as ORS")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveFluids", allowNull = true)
    private Integer haveFluids;
    @Description(description = "When symptom 2 ended")
    private Integer symptom2End;
    @Description(description = "Did the child receive care from a private physician or nurse")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareFromNurse", allowNull = true)
    private Integer receivedCareFromNurse;
    @Description(description = "How long did the individual survive before they died")
    @ExtensionIntegerConstraint(constraint = "survivedBeforeDeathConstraint", message = "Invalid Value for survivedBeforeDeath", allowNull = true)
    private Integer survivedBeforeDeath;
    @Description(description = "Where exactly was the pain located")
    @ExtensionIntegerConstraint(constraint = "abdominalPainLocationConstraint", message = "Invalid Value for abdominalPainLocation", allowNull = true)
    private Integer abdominalPainLocation;
    @Description(description = "When symptom 5 started")
    private Integer symptom5Start;
    @Description(description = "How was the development of the abdomen distention")
    @ExtensionIntegerConstraint(constraint = "distentionOfAbdomenConstraint", message = "Invalid Value for distentionOfAbdomenDevelopment", allowNull = true)
    private Integer distentionOfAbdomenDevelopment;
    @Description(description = "Was the child unable to pass a stool due to abdominal pain")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for unabledToPassStool", allowNull = true)
    private Integer unabledToPassStool;
    @Description(description = "Symptom 4 severity reported by respondent")
    @ExtensionIntegerConstraint(constraint = "symptomSeverityConstraint", message = "Invalid Value for symptom4Severity", allowNull = true)
    private Integer symptom4Severity;
    @Description(description = "What did the vomit look like")
    @ExtensionIntegerConstraint(constraint = "vomitLookLikeConstraint", message = "Invalid Value for vomitLookLike", allowNull = true)
    private Integer vomitLookLike;
    @Description(description = "Specify the other sources the child received care from")
    private String receivedCareFromOtherSpecify;
    @Description(description = "When symptom 1 started")
    private Integer symptom1Start;
    @Description(description = "Did the child have sunken eyes")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveSunkenEyes", allowNull = true)
    private Integer haveSunkenEyes;
    @Description(description = "What was the length of time of the illness immediately preceding the child's death")
    private Integer lengthOfTimeOfIllness;
    @Description(description = "House name of deceased individual")
    private String houseNameOfDeceased;
    @Description(description = "Did the child receive antibiotics")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for receivedAntibiotics", allowNull = true)
    private Integer receivedAntibiotics;
    @Description(description = "Did the child receive care from a religious leader")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareFromReligiousLeader", allowNull = true)
    private Integer receivedCareFromReligiousLeader;
    @Description(description = "How many days did the difficulty in breathing last")
    private Integer haveDifficultyBreathingNumDays;
    @Description(description = "Syptom 5 severity reported by respondent")
    @ExtensionIntegerConstraint(constraint = "symptomSeverityConstraint", message = "Invalid Value for symptom5Severity", allowNull = true)
    private Integer symptom5Severity;
    @Description(description = "Sex of deceased individual")
    @ExtensionIntegerConstraint(constraint = "genderConstraint", message = "Invalid Value for sexOfDeceased", allowNull = true)
    private Integer sexOfDeceased;
    @Description(description = "Was there blood in the stool")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for bloodInStool", allowNull = true)
    private Integer bloodInStool;
    @Description(description = "When symptom 4 ended")
    private Integer symptom4End;
    @Description(description = "When symptom 1 ended")
    private Integer symptom1End;
    @Description(description = "Did the child receive care from relatives or friends")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareFromRelatives", allowNull = true)
    private Integer receivedCareFromRelatives;
    @Description(description = "Did the child appear pale")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for appearPale", allowNull = true)
    private Integer appearPale;
    @Description(description = "How many days did the individual have the cough")
    private Integer haveCoughDays;
    @Description(description = "Did the child have a rash")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveRash", allowNull = true)
    private Integer haveRash;
    @Description(description = "Did the child have stick neck")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveStickNeck", allowNull = true)
    private Integer haveStickNeck;
    @Description(description = "Did the child's hair change to a red or yellow color")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for hairColorChange", allowNull = true)
    private Integer hairColorChange;
    @Description(description = "Did the child stop being able to grasp")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for unableToGrasp", allowNull = true)
    private Integer unableToGrasp;
    @Description(description = "When symptom 5 ended")
    private Integer symptom5End;
    @Description(description = "Certified correct date")
    @CheckCalendar(message = "Invalid value for date")
    @Temporal(TemporalType.DATE)
    @Past
    private Calendar certifiedCorrectDate;
    @Description(description = "Relationship of respondent to the deceased")
    @ExtensionIntegerConstraint(constraint = "relationshipOfRespondentConstraint", message = "Invalid Value for relationshipOfRespondent", allowNull = true)
    private Integer relationshipOfRespondent;
    @Description(description = "How long was the child unable to grasp")
    @ExtensionIntegerConstraint(constraint = "graspConstraint", message = "Invalid Value for unableToGraspLength", allowNull = true)
    private Integer unableToGraspLength;
    @Description(description = "Specify the accident type")
    private String accidentTypeOther;
    @Description(description = "Was the child's cough severe")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveCoughSeverity", allowNull = true)
    private Integer haveCoughSeverity;
    @Description(description = "Explain the illness")
    private String haveChronicIllnessOther;
    @Description(description = "Did the child have diarrhoea")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveDiarrhoea", allowNull = true)
    private Integer haveDiarrhoea;
    @Description(description = "Did the child receive treatment")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for receivedTreatment", allowNull = true)
    private Integer receivedTreatment;
    @Description(description = "Did the child have a rash on their face")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for rashOnFace", allowNull = true)
    private Integer rashOnFace;
    @Description(description = "Symptom 3 severity reported by respondent")
    @ExtensionIntegerConstraint(constraint = "symptomSeverityConstraint", message = "Invalid Value for symptom3Severity", allowNull = true)
    private Integer symptom3Severity;
    @Description(description = "Did the child receive care from other sources")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareFromOther", allowNull = true)
    private Integer receivedCareFromOther;
    @Description(description = "Proof of date of birth")
    @ExtensionIntegerConstraint(constraint = "sourceOfDobConstraint", message = "Invalid Value for sourceOfDob", allowNull = true)
    private Integer sourceOfDob;
    @Description(description = "Specify where the abdominal pain location is")
    private String abdominalPainLocationOther;
    @Description(description = "Date of interview")
    @CheckCalendar(message = "Invalid value for date")
    @Temporal(TemporalType.DATE)
    @Past
    private Calendar dateOfInterview;
    @Description(description = "How many days was the child vomitting")
    private Integer haveVomittingDays;
    @Description(description = "Did the child become very thin")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for becomeThin", allowNull = true)
    private Integer becomeThin;
    @Description(description = "How long was the child unable to follow movements")
    @ExtensionIntegerConstraint(constraint = "graspConstraint", message = "Invalid Value for unableToFollowMovementsLength", allowNull = true)
    private Integer unableToFollowMovementsLength;
    @Description(description = "The address of the facility where the individual died")
    private String whereDiedFacilityAddress;
    @Description(description = "Did the child have a rash all over their body")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for rashAllOverBody", allowNull = true)
    private Integer rashAllOverBody;
    @Description(description = "Did the child have pale palms")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for havePalePalms", allowNull = true)
    private Integer havePalePalms;
    @Description(description = "When symptom 2 started")
    private Integer symptom2Start;
    @Description(description = "Did the skin crack, split or peel after the rash started")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveSkinCrack", allowNull = true)
    private Integer haveSkinCrack;
    @Description(description = "Did the child have swelling in the goin")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for swellingInGroin", allowNull = true)
    private Integer swellingInGroin;
    @Description(description = "Where did the individual die")
    @ExtensionIntegerConstraint(constraint = "whereDiedConstraint", message = "Invalid Value for whereDied", allowNull = true)
    private Integer whereDied;
    @Description(description = "Did the child have a cough")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveCough", allowNull = true)
    private Integer haveCough;
    @Description(description = "Did the child receive care from a traditional healer")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowConstraint", message = "Invalid Value for receivedCareFromTraditionalHealer", allowNull = true)
    private Integer receivedCareFromTraditionalHealer;
    @Description(description = "How many days was the child vomitting severely")
    private Integer haveVomittingSevereDays;
    @Description(description = "Was the child miserable in the month prior to death")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for wasMiserable", allowNull = true)
    private Integer wasMiserable;
    @Description(description = "Did the child stop being able to respond to a voice")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for unableToRespondToVoice", allowNull = true)
    private Integer unableToRespondToVoice;
    @Description(description = "How many days was care sought outside the home after the illness started")
    private Integer receivedCareOutsideHomeNumDays;
    @Description(description = "Specify the proof of date of birth")
    private String sourceOfDobOther;
    @Description(description = "Symptom 1 severity reported by respondent")
    @ExtensionIntegerConstraint(constraint = "symptomSeverityConstraint", message = "Invalid Value for symptom1Severity", allowNull = true)
    private Integer symptom1Severity;
    @Description(description = "Was the child growing normally for their age")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for growingNormally", allowNull = true)
    private Integer growingNormally;
    @Description(description = "The number of days the child had abdominal pain")
    private Integer haveAbdominalPainDays;
    @Description(description = "How many days did the child have a fever")
    private Integer feverDays;
    @Description(description = "Was the child unconscious")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for wasUnconscious", allowNull = true)
    private Integer wasUnconscious;
    @Description(description = "When symptom 4 started")
    private Integer symptom4Start;
    @Description(description = "How many days did the diffiuclty in fast breathing last")
    private Integer haveFastBreathingNumDays;
    @Description(description = "Did the child have vomitting")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveVomitting", allowNull = true)
    private Integer haveVomitting;
    @Description(description = "Name of deceased individual")
    private String nameOfDeceased;
    @Description(description = "Did the child have chest in drawing")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveChestInDrawing", allowNull = true)
    private Integer haveChestInDrawing;
    @Description(description = "Which anti-malaria drug did the child receive")
    @ExtensionIntegerConstraint(constraint = "whichAntiMalariaDrugConstraint", message = "Invalid Value for whichAntiMalariaDrug", allowNull = true)
    private Integer whichAntiMalariaDrug;
    @Description(description = "Interviewers comments and observations")
    private String interviewersComments;
    @Description(description = "When symptom 3 started")
    private Integer symptom3Start;
    @Description(description = "What kind of animal bite")
    @ExtensionIntegerConstraint(constraint = "animalBiteTypeConstraint", message = "Invalid Value for animalBiteType", allowNull = true)
    private Integer animalBiteType;
    @Description(description = "Did the individual receive medical care from the accident before death")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for receivedMedicalAttention", allowNull = true)
    private Integer receivedMedicalAttention;
    @Description(description = "Corrected by")
    private String correctedBy;
    @Description(description = "Name of respondent of verbal autopsy")
    private String nameOfRespondent;
    @Description(description = "Specify what the vomit looked like")
    private String vomitLookLikeOther;
    @Description(description = "Did the child have distention of the abdomen")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for distentionOfAbdomen", allowNull = true)
    private Integer distentionOfAbdomen;
    @Description(description = "Was the child wheezing")
    @ExtensionIntegerConstraint(constraint = "yesNoDontKnowNAConstraint", message = "Invalid Value for haveWheezing", allowNull = true)
    private Integer haveWheezing;
    @Description(description = "Specify where the individual died")
    private String whereDiedOther;
    @Description(description = "Specify the relationship of respondent to the deceased")
    private String relationshipOfRespondentOther;

    public Individual getIndividual() {
        return individual;
    }

    public void setIndividual(Individual indiv) {
        individual = indiv;
    }

    public Location getHouse() {
        return house;
    }

    public void setHouse(Location location) {
        house = location;
    }

    @XmlJavaTypeAdapter(org.openhds.domain.util.CalendarAdapter.class)
    public Calendar getChildDeathDate() {
        return childDeathDate;
    }

    public void setChildDeathDate(Calendar date) {
        childDeathDate = date;
    }

    public Integer getSkinFlakeoff() {
        return skinFlakeoff;
    }

    public void setSkinFlakeoff(Integer data) {
        skinFlakeoff = data;
    }

    public Integer getReceivedCareFromPharmacy() {
        return receivedCareFromPharmacy;
    }

    public void setReceivedCareFromPharmacy(Integer data) {
        receivedCareFromPharmacy = data;
    }

    public Integer getHaveDiarrhoeaDays() {
        return haveDiarrhoeaDays;
    }

    public void setHaveDiarrhoeaDays(Integer data) {
        haveDiarrhoeaDays = data;
    }

    public Integer getRashDays() {
        return rashDays;
    }

    public void setRashDays(Integer data) {
        rashDays = data;
    }

    public Integer getAccidentType() {
        return accidentType;
    }

    public void setAccidentType(Integer data) {
        accidentType = data;
    }

    public Integer getHaveDifficultyBreathing() {
        return haveDifficultyBreathing;
    }

    public void setHaveDifficultyBreathing(Integer data) {
        haveDifficultyBreathing = data;
    }

    public Integer getSymptom3End() {
        return symptom3End;
    }

    public void setSymptom3End(Integer data) {
        symptom3End = data;
    }

    public Integer getHaveBodySwelling() {
        return haveBodySwelling;
    }

    public void setHaveBodySwelling(Integer data) {
        haveBodySwelling = data;
    }

    public Integer getUnableToFollowMovements() {
        return unableToFollowMovements;
    }

    public void setUnableToFollowMovements(Integer data) {
        unableToFollowMovements = data;
    }

    public String getAboutIllness() {
        return aboutIllness;
    }

    public void setAboutIllness(String data) {
        aboutIllness = data;
    }

    public Integer getHaveRashInsideMouth() {
        return haveRashInsideMouth;
    }

    public void setHaveRashInsideMouth(Integer data) {
        haveRashInsideMouth = data;
    }

    public Integer getReceivedCareFromHospital() {
        return receivedCareFromHospital;
    }

    public void setReceivedCareFromHospital(Integer data) {
        receivedCareFromHospital = data;
    }

    public Integer getAbdominalPainType() {
        return abdominalPainType;
    }

    public void setAbdominalPainType(Integer data) {
        abdominalPainType = data;
    }

    public String getAbdominalPainTypeOther() {
        return abdominalPainTypeOther;
    }

    public void setAbdominalPainTypeOther(String data) {
        abdominalPainTypeOther = data;
    }

    public Integer getHaveWhiteNails() {
        return haveWhiteNails;
    }

    public void setHaveWhiteNails(Integer data) {
        haveWhiteNails = data;
    }

    public Integer getDistentionOfAbdomenDays() {
        return distentionOfAbdomenDays;
    }

    public void setDistentionOfAbdomenDays(Integer data) {
        distentionOfAbdomenDays = data;
    }

    public Integer getReceivedCareOutsideHome() {
        return receivedCareOutsideHome;
    }

    public void setReceivedCareOutsideHome(Integer data) {
        receivedCareOutsideHome = data;
    }

    public Integer getHaveFever() {
        return haveFever;
    }

    public void setHaveFever(Integer data) {
        haveFever = data;
    }

    public Integer getSwellingInNeck() {
        return swellingInNeck;
    }

    public void setSwellingInNeck(Integer data) {
        swellingInNeck = data;
    }

    public Integer getReceivedCareFromCHO() {
        return receivedCareFromCHO;
    }

    public void setReceivedCareFromCHO(Integer data) {
        receivedCareFromCHO = data;
    }

    public Integer getWasWasting() {
        return wasWasting;
    }

    public void setWasWasting(Integer data) {
        wasWasting = data;
    }

    public Integer getDieFromInjuryOrAccident() {
        return dieFromInjuryOrAccident;
    }

    public void setDieFromInjuryOrAccident(Integer data) {
        dieFromInjuryOrAccident = data;
    }

    public String getSymptom5() {
        return symptom5;
    }

    public void setSymptom5(String data) {
        symptom5 = data;
    }

    public Integer getSwollenLegsOrFeetNumDays() {
        return swollenLegsOrFeetNumDays;
    }

    public void setSwollenLegsOrFeetNumDays(Integer data) {
        swollenLegsOrFeetNumDays = data;
    }

    public Integer getReceivedCareFromDrugSeller() {
        return receivedCareFromDrugSeller;
    }

    public void setReceivedCareFromDrugSeller(Integer data) {
        receivedCareFromDrugSeller = data;
    }

    public String getSymptom4() {
        return symptom4;
    }

    public void setSymptom4(String data) {
        symptom4 = data;
    }

    public Integer getSymptom2Severity() {
        return symptom2Severity;
    }

    public void setSymptom2Severity(Integer data) {
        symptom2Severity = data;
    }

    public String getSymptom3() {
        return symptom3;
    }

    public void setSymptom3(String data) {
        symptom3 = data;
    }

    public String getSymptom2() {
        return symptom2;
    }

    public void setSymptom2(String data) {
        symptom2 = data;
    }

    public Integer getHaveMeasels() {
        return haveMeasels;
    }

    public void setHaveMeasels(Integer data) {
        haveMeasels = data;
    }

    public String getSymptom1() {
        return symptom1;
    }

    public void setSymptom1(String data) {
        symptom1 = data;
    }

    public Integer getDiedAtAccident() {
        return diedAtAccident;
    }

    public void setDiedAtAccident(Integer data) {
        diedAtAccident = data;
    }

    public Integer getSicknessRate() {
        return sicknessRate;
    }

    public void setSicknessRate(Integer data) {
        sicknessRate = data;
    }

    public Integer getHaveFastBreathing() {
        return haveFastBreathing;
    }

    public void setHaveFastBreathing(Integer data) {
        haveFastBreathing = data;
    }

    public Integer getReceivedCareFromHealthCenter() {
        return receivedCareFromHealthCenter;
    }

    public void setReceivedCareFromHealthCenter(Integer data) {
        receivedCareFromHealthCenter = data;
    }

    public Integer getHaveBulgingFontanel() {
        return haveBulgingFontanel;
    }

    public void setHaveBulgingFontanel(Integer data) {
        haveBulgingFontanel = data;
    }

    public Integer getHaveChronicIllness() {
        return haveChronicIllness;
    }

    public void setHaveChronicIllness(Integer data) {
        haveChronicIllness = data;
    }

    public Integer getSwellingInArmpit() {
        return swellingInArmpit;
    }

    public void setSwellingInArmpit(Integer data) {
        swellingInArmpit = data;
    }

    public Integer getHaveAbdominalPain() {
        return haveAbdominalPain;
    }

    public void setHaveAbdominalPain(Integer data) {
        haveAbdominalPain = data;
    }

    public String getWhereDiedFacilityName() {
        return whereDiedFacilityName;
    }

    public void setWhereDiedFacilityName(String data) {
        whereDiedFacilityName = data;
    }

    @XmlJavaTypeAdapter(org.openhds.domain.util.CalendarAdapter.class)
    public Calendar getChildDob() {
        return childDob;
    }

    public void setChildDob(Calendar data) {
        childDob = data;
    }

    public Integer getAbdominalPainSeverity() {
        return abdominalPainSeverity;
    }

    public void setAbdominalPainSeverity(Integer data) {
        abdominalPainSeverity = data;
    }

    public Integer getRashHaveBlisters() {
        return rashHaveBlisters;
    }

    public void setRashHaveBlisters(Integer data) {
        rashHaveBlisters = data;
    }

    public Integer getUnableToRespondToVoiceLength() {
        return unableToRespondToVoiceLength;
    }

    public void setUnableToRespondToVoiceLength(Integer data) {
        unableToRespondToVoiceLength = data;
    }

    public Integer getStoolDays() {
        return stoolDays;
    }

    public void setStoolDays(Integer data) {
        stoolDays = data;
    }

    public Integer getSwollenLegsOrFeet() {
        return swollenLegsOrFeet;
    }

    public void setSwollenLegsOrFeet(Integer data) {
        swollenLegsOrFeet = data;
    }

    public Integer getDidReceiveAntiMalariDrug() {
        return didReceiveAntiMalariDrug;
    }

    public void setDidReceiveAntiMalariDrug(Integer data) {
        didReceiveAntiMalariDrug = data;
    }

    public Integer getHaveFits() {
        return haveFits;
    }

    public void setHaveFits(Integer data) {
        haveFits = data;
    }

    public Integer getHaveFluids() {
        return haveFluids;
    }

    public void setHaveFluids(Integer data) {
        haveFluids = data;
    }

    public Integer getSymptom2End() {
        return symptom2End;
    }

    public void setSymptom2End(Integer data) {
        symptom2End = data;
    }

    public Integer getReceivedCareFromNurse() {
        return receivedCareFromNurse;
    }

    public void setReceivedCareFromNurse(Integer data) {
        receivedCareFromNurse = data;
    }

    public Integer getSurvivedBeforeDeath() {
        return survivedBeforeDeath;
    }

    public void setSurvivedBeforeDeath(Integer data) {
        survivedBeforeDeath = data;
    }

    public Integer getAbdominalPainLocation() {
        return abdominalPainLocation;
    }

    public void setAbdominalPainLocation(Integer data) {
        abdominalPainLocation = data;
    }

    public Integer getSymptom5Start() {
        return symptom5Start;
    }

    public void setSymptom5Start(Integer data) {
        symptom5Start = data;
    }

    public Integer getDistentionOfAbdomenDevelopment() {
        return distentionOfAbdomenDevelopment;
    }

    public void setDistentionOfAbdomenDevelopment(Integer data) {
        distentionOfAbdomenDevelopment = data;
    }

    public Integer getUnabledToPassStool() {
        return unabledToPassStool;
    }

    public void setUnabledToPassStool(Integer data) {
        unabledToPassStool = data;
    }

    public Integer getSymptom4Severity() {
        return symptom4Severity;
    }

    public void setSymptom4Severity(Integer data) {
        symptom4Severity = data;
    }

    public Integer getVomitLookLike() {
        return vomitLookLike;
    }

    public void setVomitLookLike(Integer data) {
        vomitLookLike = data;
    }

    public String getReceivedCareFromOtherSpecify() {
        return receivedCareFromOtherSpecify;
    }

    public void setReceivedCareFromOtherSpecify(String data) {
        receivedCareFromOtherSpecify = data;
    }

    public Integer getSymptom1Start() {
        return symptom1Start;
    }

    public void setSymptom1Start(Integer data) {
        symptom1Start = data;
    }

    public Integer getHaveSunkenEyes() {
        return haveSunkenEyes;
    }

    public void setHaveSunkenEyes(Integer data) {
        haveSunkenEyes = data;
    }

    public Integer getLengthOfTimeOfIllness() {
        return lengthOfTimeOfIllness;
    }

    public void setLengthOfTimeOfIllness(Integer data) {
        lengthOfTimeOfIllness = data;
    }

    public String getHouseNameOfDeceased() {
        return houseNameOfDeceased;
    }

    public void setHouseNameOfDeceased(String data) {
        houseNameOfDeceased = data;
    }

    public Integer getReceivedAntibiotics() {
        return receivedAntibiotics;
    }

    public void setReceivedAntibiotics(Integer data) {
        receivedAntibiotics = data;
    }

    public Integer getReceivedCareFromReligiousLeader() {
        return receivedCareFromReligiousLeader;
    }

    public void setReceivedCareFromReligiousLeader(Integer data) {
        receivedCareFromReligiousLeader = data;
    }

    public Integer getHaveDifficultyBreathingNumDays() {
        return haveDifficultyBreathingNumDays;
    }

    public void setHaveDifficultyBreathingNumDays(Integer data) {
        haveDifficultyBreathingNumDays = data;
    }

    public Integer getSymptom5Severity() {
        return symptom5Severity;
    }

    public void setSymptom5Severity(Integer data) {
        symptom5Severity = data;
    }

    public Integer getSexOfDeceased() {
        return sexOfDeceased;
    }

    public void setSexOfDeceased(Integer data) {
        sexOfDeceased = data;
    }

    public Integer getBloodInStool() {
        return bloodInStool;
    }

    public void setBloodInStool(Integer data) {
        bloodInStool = data;
    }

    public Integer getSymptom4End() {
        return symptom4End;
    }

    public void setSymptom4End(Integer data) {
        symptom4End = data;
    }

    public Integer getSymptom1End() {
        return symptom1End;
    }

    public void setSymptom1End(Integer data) {
        symptom1End = data;
    }

    public Integer getReceivedCareFromRelatives() {
        return receivedCareFromRelatives;
    }

    public void setReceivedCareFromRelatives(Integer data) {
        receivedCareFromRelatives = data;
    }

    public Integer getAppearPale() {
        return appearPale;
    }

    public void setAppearPale(Integer data) {
        appearPale = data;
    }

    public Integer getHaveCoughDays() {
        return haveCoughDays;
    }

    public void setHaveCoughDays(Integer data) {
        haveCoughDays = data;
    }

    public Integer getHaveRash() {
        return haveRash;
    }

    public void setHaveRash(Integer data) {
        haveRash = data;
    }

    public Integer getHaveStickNeck() {
        return haveStickNeck;
    }

    public void setHaveStickNeck(Integer data) {
        haveStickNeck = data;
    }

    public Integer getHairColorChange() {
        return hairColorChange;
    }

    public void setHairColorChange(Integer data) {
        hairColorChange = data;
    }

    public Integer getUnableToGrasp() {
        return unableToGrasp;
    }

    public void setUnableToGrasp(Integer data) {
        unableToGrasp = data;
    }

    public Integer getSymptom5End() {
        return symptom5End;
    }

    public void setSymptom5End(Integer data) {
        symptom5End = data;
    }

    @XmlJavaTypeAdapter(org.openhds.domain.util.CalendarAdapter.class)
    public Calendar getCertifiedCorrectDate() {
        return certifiedCorrectDate;
    }

    public void setCertifiedCorrectDate(Calendar data) {
        certifiedCorrectDate = data;
    }

    public Integer getRelationshipOfRespondent() {
        return relationshipOfRespondent;
    }

    public void setRelationshipOfRespondent(Integer data) {
        relationshipOfRespondent = data;
    }

    public Integer getUnableToGraspLength() {
        return unableToGraspLength;
    }

    public void setUnableToGraspLength(Integer data) {
        unableToGraspLength = data;
    }

    public String getAccidentTypeOther() {
        return accidentTypeOther;
    }

    public void setAccidentTypeOther(String data) {
        accidentTypeOther = data;
    }

    public Integer getHaveCoughSeverity() {
        return haveCoughSeverity;
    }

    public void setHaveCoughSeverity(Integer data) {
        haveCoughSeverity = data;
    }

    public String getHaveChronicIllnessOther() {
        return haveChronicIllnessOther;
    }

    public void setHaveChronicIllnessOther(String data) {
        haveChronicIllnessOther = data;
    }

    public Integer getHaveDiarrhoea() {
        return haveDiarrhoea;
    }

    public void setHaveDiarrhoea(Integer data) {
        haveDiarrhoea = data;
    }

    public Integer getReceivedTreatment() {
        return receivedTreatment;
    }

    public void setReceivedTreatment(Integer data) {
        receivedTreatment = data;
    }

    public Integer getRashOnFace() {
        return rashOnFace;
    }

    public void setRashOnFace(Integer data) {
        rashOnFace = data;
    }

    public Integer getSymptom3Severity() {
        return symptom3Severity;
    }

    public void setSymptom3Severity(Integer data) {
        symptom3Severity = data;
    }

    public Integer getReceivedCareFromOther() {
        return receivedCareFromOther;
    }

    public void setReceivedCareFromOther(Integer data) {
        receivedCareFromOther = data;
    }

    public Integer getSourceOfDob() {
        return sourceOfDob;
    }

    public void setSourceOfDob(Integer data) {
        sourceOfDob = data;
    }

    public String getAbdominalPainLocationOther() {
        return abdominalPainLocationOther;
    }

    public void setAbdominalPainLocationOther(String data) {
        abdominalPainLocationOther = data;
    }

    @XmlJavaTypeAdapter(org.openhds.domain.util.CalendarAdapter.class)
    public Calendar getDateOfInterview() {
        return dateOfInterview;
    }

    public void setDateOfInterview(Calendar data) {
        dateOfInterview = data;
    }

    public Integer getHaveVomittingDays() {
        return haveVomittingDays;
    }

    public void setHaveVomittingDays(Integer data) {
        haveVomittingDays = data;
    }

    public Integer getBecomeThin() {
        return becomeThin;
    }

    public void setBecomeThin(Integer data) {
        becomeThin = data;
    }

    public Integer getUnableToFollowMovementsLength() {
        return unableToFollowMovementsLength;
    }

    public void setUnableToFollowMovementsLength(Integer data) {
        unableToFollowMovementsLength = data;
    }

    public String getWhereDiedFacilityAddress() {
        return whereDiedFacilityAddress;
    }

    public void setWhereDiedFacilityAddress(String data) {
        whereDiedFacilityAddress = data;
    }

    public Integer getRashAllOverBody() {
        return rashAllOverBody;
    }

    public void setRashAllOverBody(Integer data) {
        rashAllOverBody = data;
    }

    public Integer getHavePalePalms() {
        return havePalePalms;
    }

    public void setHavePalePalms(Integer data) {
        havePalePalms = data;
    }

    public Integer getSymptom2Start() {
        return symptom2Start;
    }

    public void setSymptom2Start(Integer data) {
        symptom2Start = data;
    }

    public Integer getHaveSkinCrack() {
        return haveSkinCrack;
    }

    public void setHaveSkinCrack(Integer data) {
        haveSkinCrack = data;
    }

    public Integer getSwellingInGroin() {
        return swellingInGroin;
    }

    public void setSwellingInGroin(Integer data) {
        swellingInGroin = data;
    }

    public Integer getWhereDied() {
        return whereDied;
    }

    public void setWhereDied(Integer data) {
        whereDied = data;
    }

    public Integer getHaveCough() {
        return haveCough;
    }

    public void setHaveCough(Integer data) {
        haveCough = data;
    }

    public Integer getReceivedCareFromTraditionalHealer() {
        return receivedCareFromTraditionalHealer;
    }

    public void setReceivedCareFromTraditionalHealer(Integer data) {
        receivedCareFromTraditionalHealer = data;
    }

    public Integer getHaveVomittingSevereDays() {
        return haveVomittingSevereDays;
    }

    public void setHaveVomittingSevereDays(Integer data) {
        haveVomittingSevereDays = data;
    }

    public Integer getWasMiserable() {
        return wasMiserable;
    }

    public void setWasMiserable(Integer data) {
        wasMiserable = data;
    }

    public Integer getUnableToRespondToVoice() {
        return unableToRespondToVoice;
    }

    public void setUnableToRespondToVoice(Integer data) {
        unableToRespondToVoice = data;
    }

    public Integer getReceivedCareOutsideHomeNumDays() {
        return receivedCareOutsideHomeNumDays;
    }

    public void setReceivedCareOutsideHomeNumDays(Integer data) {
        receivedCareOutsideHomeNumDays = data;
    }

    public String getSourceOfDobOther() {
        return sourceOfDobOther;
    }

    public void setSourceOfDobOther(String data) {
        sourceOfDobOther = data;
    }

    public Integer getSymptom1Severity() {
        return symptom1Severity;
    }

    public void setSymptom1Severity(Integer data) {
        symptom1Severity = data;
    }

    public Integer getGrowingNormally() {
        return growingNormally;
    }

    public void setGrowingNormally(Integer data) {
        growingNormally = data;
    }

    public Integer getHaveAbdominalPainDays() {
        return haveAbdominalPainDays;
    }

    public void setHaveAbdominalPainDays(Integer data) {
        haveAbdominalPainDays = data;
    }

    public Integer getFeverDays() {
        return feverDays;
    }

    public void setFeverDays(Integer data) {
        feverDays = data;
    }

    public Integer getWasUnconscious() {
        return wasUnconscious;
    }

    public void setWasUnconscious(Integer data) {
        wasUnconscious = data;
    }

    public Integer getSymptom4Start() {
        return symptom4Start;
    }

    public void setSymptom4Start(Integer data) {
        symptom4Start = data;
    }

    public Integer getHaveFastBreathingNumDays() {
        return haveFastBreathingNumDays;
    }

    public void setHaveFastBreathingNumDays(Integer data) {
        haveFastBreathingNumDays = data;
    }

    public Integer getHaveVomitting() {
        return haveVomitting;
    }

    public void setHaveVomitting(Integer data) {
        haveVomitting = data;
    }

    public String getNameOfDeceased() {
        return nameOfDeceased;
    }

    public void setNameOfDeceased(String data) {
        nameOfDeceased = data;
    }

    public Integer getHaveChestInDrawing() {
        return haveChestInDrawing;
    }

    public void setHaveChestInDrawing(Integer data) {
        haveChestInDrawing = data;
    }

    public Integer getWhichAntiMalariaDrug() {
        return whichAntiMalariaDrug;
    }

    public void setWhichAntiMalariaDrug(Integer data) {
        whichAntiMalariaDrug = data;
    }

    public String getInterviewersComments() {
        return interviewersComments;
    }

    public void setInterviewersComments(String data) {
        interviewersComments = data;
    }

    public Integer getSymptom3Start() {
        return symptom3Start;
    }

    public void setSymptom3Start(Integer data) {
        symptom3Start = data;
    }

    public Integer getAnimalBiteType() {
        return animalBiteType;
    }

    public void setAnimalBiteType(Integer data) {
        animalBiteType = data;
    }

    public Integer getReceivedMedicalAttention() {
        return receivedMedicalAttention;
    }

    public void setReceivedMedicalAttention(Integer data) {
        receivedMedicalAttention = data;
    }

    public String getCorrectedBy() {
        return correctedBy;
    }

    public void setCorrectedBy(String data) {
        correctedBy = data;
    }

    public String getNameOfRespondent() {
        return nameOfRespondent;
    }

    public void setNameOfRespondent(String data) {
        nameOfRespondent = data;
    }

    public String getVomitLookLikeOther() {
        return vomitLookLikeOther;
    }

    public void setVomitLookLikeOther(String data) {
        vomitLookLikeOther = data;
    }

    public Integer getDistentionOfAbdomen() {
        return distentionOfAbdomen;
    }

    public void setDistentionOfAbdomen(Integer data) {
        distentionOfAbdomen = data;
    }

    public Integer getHaveWheezing() {
        return haveWheezing;
    }

    public void setHaveWheezing(Integer data) {
        haveWheezing = data;
    }

    public String getWhereDiedOther() {
        return whereDiedOther;
    }

    public void setWhereDiedOther(String data) {
        whereDiedOther = data;
    }

    public String getRelationshipOfRespondentOther() {
        return relationshipOfRespondentOther;
    }

    public void setRelationshipOfRespondentOther(String data) {
        relationshipOfRespondentOther = data;
    }

}
